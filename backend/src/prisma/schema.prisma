datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    username      String?   @unique
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]

    sessions Session[]

    conversationParticipant ConversationParticipant[]
    messages                Message[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Conversation {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    latestMessageId String?  @unique
    latestMessage   Message? @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)

    conversationParticipant ConversationParticipant[]

    messages Message[]
}

model ConversationParticipant {
    id                   String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt            DateTime @default(now())
    updatedAt            DateTime @updatedAt
    hasSeenLatestMessage Boolean

    userId String
    user   User   @relation(fields: [userId], references: [id])

    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id])
}

model Message {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    conversationId String
    conversation   Conversation @relation(fields: [conversationId], references: [id])

    senderId String
    sender   User   @relation(fields: [senderId], references: [id])

    isLatestIn Conversation? @relation(name: "latestConversationMessage")
}
